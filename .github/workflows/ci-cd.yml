name: CI/CD Pipeline PrestaShop

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environnement de déploiement"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  lint:
    name: Lint des fichiers de configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Validation du YAML
        run: |
          find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -c .yamllint

      - name: Validation des fichiers Docker
        run: |
          find . -name "Dockerfile" | xargs hadolint

  build:
    name: Build et Push des images Docker
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration des variables
        id: vars
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Login à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build et push de l'image PrestaShop
        uses: docker/build-push-action@v4
        with:
          context: ./prestashop
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/prestashop:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/prestashop:${{ steps.vars.outputs.sha_short }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/prestashop:latest
          cache-to: type=inline

      - name: Build et push de l'image Backup
        uses: docker/build-push-action@v4
        with:
          context: ./backup
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/prestashop-backup:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/prestashop-backup:${{ steps.vars.outputs.sha_short }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/prestashop-backup:latest
          cache-to: type=inline

  test:
    name: Tests des images Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Démarrage temporaire pour tests
        run: |
          # Démarrage des conteneurs pour les tests
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

          # Attente de démarrage des services
          sleep 30

          # Test des services
          docker-compose -f docker-compose.yml -f docker-compose.test.yml exec -T prestashop curl -s --head --request GET http://localhost | grep "200 OK"

          # Nettoyage
          docker-compose -f docker-compose.yml -f docker-compose.test.yml down

  deploy:
    name: Déploiement
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Détermination de l'environnement
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            ENV="staging"
          fi
          echo "::set-output name=environment::$ENV"

      - name: Configuration SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configuration connue des hôtes
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Déploiement sur le serveur
        run: |
          ENV="${{ steps.env.outputs.environment }}"

          # Transfert des fichiers
          scp -r docker-compose.yml .env.example nginx prestashop monitoring backup ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/prestashop-$ENV/

          # Exécution du déploiement
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ~/prestashop-$ENV && \
            cp .env.example .env && \
            docker-compose pull && \
            docker-compose up -d && \
            docker-compose ps"

  notify:
    name: Notification du déploiement
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notification Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: prestashop-deployments
          SLACK_COLOR: ${{ needs.deploy.result == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Déploiement PrestaShop ${{ needs.deploy.result == 'success' && 'réussi' || 'échoué' }}
          SLACK_MESSAGE: 'Environnement: ${{ github.event.inputs.environment || "staging" }} - Tag: ${{ github.ref_name }} - Commit: ${{ github.sha }}'
